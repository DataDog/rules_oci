""" blob """

load("@com_github_datadog_rules_oci//oci:providers.bzl", "OCIDescriptor")

def _oci_blob_impl(ctx):
    return [OCIDescriptor(
        file = ctx.file.file,
        media_type = ctx.attr.media_type,
        size = ctx.attr.size,
        urls = ctx.attr.urls,
        digest = ctx.attr.digest,
        annotations = ctx.attr.annotations,
    )]

oci_blob = rule(
    implementation = _oci_blob_impl,
    doc = """
An internal rule to represent a blob in a content-addressable store. This
rule is usually generated by 'ocitool' when pulling an OCI artifact.
    """,
    provides = [OCIDescriptor],
    attrs = {
        "file": attr.label(
            doc = """
The blob stored as a file on disk.
            """,
            allow_single_file = True,
        ),
        "digest": attr.string(
            doc = """
A digest of the contents of the file, in the format '$ALGO:%HASH_IN_HEX', for
example 'sha256:abcd...'
            """,
        ),
        "media_type": attr.string(
            doc = """
MIME type of blob.
            """,
        ),
        "size": attr.int(
            doc = """
Size of content in bytes.
            """,
        ),
        "urls": attr.string_list(
            doc = """
A list of URLs from which this object MAY be downloaded.
            """,
        ),
        "annotations": attr.string_dict(
            doc = """
A map of arbitrary metadata relating to the targeted content.
            """,
        ),
    },
)
