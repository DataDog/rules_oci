load("//oci:ctx.bzl", "oci_ctx")

def create_blob(octx, file, media_type="", annotations={}):
    descriptor_file = octx.actions.declare_file("{}.descriptor.json".format(octx.prefix))

    octx.actions.run(
        executable = octx.toolchain.sdk.ocitool,
        arguments = [
                        "create-blob",
                        "--outd={}".format(descriptor_file.path),
                        "--file={}".format(file.path),
                        "--media-type={}".format(media_type),
        ] +
        ["--annotations={}={}".format(k, v) for k, v in annotation.items()],
        inputs = [file],
        outputs = [
            descriptor_file,
        ],
    )

    return struct(
        blob_desc = OCIDescriptor(
            descriptor_file = descriptor_file,
            file = file,
        ),
    )

def _oci_blob_impl(ctx):
    desc = OCIDescriptor(
        file = ctx.file.file,
        media_type = ctx.attr.media_type,
        size = ctx.attr.size,
        urls = ctx.attr.urls,
        digest = ctx.attr.digest,
        annotations = ctx.attr.annotations,
    )

    if ctx.attr.digest == "" and ctx.attr.file != None:
        octx = oci_ctx(ctx)
        blob_desc = create_blob(
            octx,
            file=ctx.files.file,
            media_type=ctx.attr.media_type,
            annotations=ctx.attr.annotations,
        )
        desc = blob_desc.blob_desc

    return [desc]

oci_blob = rule(
    implementation = _oci_blob_impl,
    doc = """
An internal rule to represent a blob in a content-addressable store. This
rule is usually generated by 'ocitool' when pulling an OCI artifact.
    """,
    provides = [OCIDescriptor],
    toolchains = ["@com_github_datadog_rules_oci//oci:toolchain"],
    attrs = {
        "file": attr.label(
            doc = """
The blob stored as a file on disk.
            """,
            allow_single_file = True,
        ),
        "digest": attr.string(
            doc = """
A digest of the contents of the file, in the format '$ALGO:%HASH_IN_HEX', for
example 'sha256:abcd...'
            """,
        ),
        "media_type": attr.string(
            doc = """
MIME type of blob.
            """,
        ),
        "size": attr.int(
            doc = """
Size of content in bytes.
            """,

        ),
        "urls": attr.string_list(
            doc = """
A list of URLs from which this object MAY be downloaded.
            """,

        ),
        "annotations": attr.string_dict(
            doc = """
A map of arbitrary metadata relating to the targeted content.
            """,
        ),
    },
)
